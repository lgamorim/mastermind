// See https://aka.ms/new-console-template for more information

using Mastermind.Core;

// This variable is defined to allow the user to display on screen the pattern generated by the Code Maker.
var isDebug = args.Length > 0 && args[0].ToUpperInvariant().Equals("DEBUG");

ShowCodePegColors();
Console.WriteLine("\n(i) The Code Breaker plays by typing 4 colors separated by a blank space.");

var decodingBoard = new DecodingBoard();
var generatedCode = CodeMakerPlay(decodingBoard.BoardConfig.ShieldSize);
var shield = new Shield(generatedCode);
decodingBoard.CodeMaker(shield);

for (var play = 1; play <= decodingBoard.BoardConfig.TotalRows; play++)
{
    var codePlayed = CodeBreakerPlay(play);
    
    Console.Write("(i) The Code Breaker has played:\n\t");
    
    foreach (var color in codePlayed)
    {
        WriteColor(color.ToString());
        Console.Write(' ');
    }

    var response = decodingBoard.CodeBreaker(codePlayed);
    
    Console.Write("\n(o) The Code Maker has responded:\n\t");
    
    for (var i = 0; i < response.BlackKeyPegs; i++)
    {
        WriteColor(KeyPeg.Black.ToString());
        Console.Write(' ');
    }

    for (var i = 0; i < response.WhiteKeyPegs; i++)
    {
        WriteColor(KeyPeg.White.ToString());
        Console.Write(' ');
    }

    Console.WriteLine();
}

void ShowCodePegColors()
{
    var codePegColors = GetCodePegColors();
    Console.WriteLine($"(i) There are Code Pegs with {codePegColors.Length} different colors:");
    foreach (var color in codePegColors)
    {
        Console.Write("\t");
        WriteColor(color, true);
    }
}

string[] GetCodePegColors()
{
    var colors = Enum.GetNames(typeof(CodePeg));

    return colors.ToArray();
}

void WriteColor(string color, bool newline = false)
{
    var foregroundColor = Enum.Parse<ConsoleColor>(color);

    Console.ForegroundColor = foregroundColor;
    Console.BackgroundColor = foregroundColor != ConsoleColor.Black ? ConsoleColor.Black : ConsoleColor.White;

    var message = $"[{color}]";
    if (newline) Console.WriteLine(message);
    else Console.Write(message);

    Console.BackgroundColor = ConsoleColor.Black;
    Console.ForegroundColor = ConsoleColor.Gray;
}

CodePeg[] CodeMakerPlay(int size)
{
    var colors = GetCodePegColors();
    var pattern = new CodePeg[decodingBoard.BoardConfig.ShieldSize];

    var rd = new Random(DateTime.UtcNow.Millisecond);
    for (var i = 0; i < size; i++)
    {
        pattern[i] = Enum.Parse<CodePeg>(colors[rd.Next(0, colors.Length)]);
    }

    Console.Write("(o) The Code Maker has played.\n\t");
    
    if (isDebug)
    {
        foreach (var color in pattern)
        {
            WriteColor(color.ToString());
            Console.Write(' ');
        }
        
        Console.WriteLine();
    }
    else
    {
        Console.WriteLine("[X] [X] [X] [X]");
    }

    return pattern;
}

CodePeg[] CodeBreakerPlay(int play)
{
    Console.Write($"\n(?) Code Breaker play {play}/{decodingBoard.BoardConfig.TotalRows}:\t");
    
    var input = Console.ReadLine();
    var colors = input?.Split(' ');
    if (colors is null || colors.Length != decodingBoard.BoardConfig.ShieldSize)
    {
        Console.WriteLine("(!) The Code Breaker plays by typing 4 colors separated by a blank space.");
        
        return CodeBreakerPlay(play);
    }

    var codePlayed = new List<CodePeg>(colors.Length);
    foreach (var color in colors)
    {
        if (!Enum.TryParse<CodePeg>(color, out var peg))
        {
            Console.WriteLine($"(!) The color {color} played is not a valid Code Peg color.");
            
            return CodeBreakerPlay(play);
        }

        codePlayed.Add(peg);
    }

    return codePlayed.ToArray();
}